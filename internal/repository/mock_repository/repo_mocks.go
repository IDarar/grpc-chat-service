// Code generated by MockGen. DO NOT EDIT.
// Source: repositories.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	bytes "bytes"
	reflect "reflect"

	chat_service "github.com/IDarar/grpc-chat-service/chat_service"
	gomock "github.com/golang/mock/gomock"
)

// MockMessages is a mock of Messages interface.
type MockMessages struct {
	ctrl     *gomock.Controller
	recorder *MockMessagesMockRecorder
}

// MockMessagesMockRecorder is the mock recorder for MockMessages.
type MockMessagesMockRecorder struct {
	mock *MockMessages
}

// NewMockMessages creates a new mock instance.
func NewMockMessages(ctrl *gomock.Controller) *MockMessages {
	mock := &MockMessages{ctrl: ctrl}
	mock.recorder = &MockMessagesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMessages) EXPECT() *MockMessagesMockRecorder {
	return m.recorder
}

// Save mocks base method.
func (m *MockMessages) Save(msg *chat_service.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", msg)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockMessagesMockRecorder) Save(msg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockMessages)(nil).Save), msg)
}

// MockImages is a mock of Images interface.
type MockImages struct {
	ctrl     *gomock.Controller
	recorder *MockImagesMockRecorder
}

// MockImagesMockRecorder is the mock recorder for MockImages.
type MockImagesMockRecorder struct {
	mock *MockImages
}

// NewMockImages creates a new mock instance.
func NewMockImages(ctrl *gomock.Controller) *MockImages {
	mock := &MockImages{ctrl: ctrl}
	mock.recorder = &MockImagesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockImages) EXPECT() *MockImagesMockRecorder {
	return m.recorder
}

// Save mocks base method.
func (m *MockImages) Save(ext string, imageData *bytes.Buffer) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", ext, imageData)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Save indicates an expected call of Save.
func (mr *MockImagesMockRecorder) Save(ext, imageData interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockImages)(nil).Save), ext, imageData)
}
